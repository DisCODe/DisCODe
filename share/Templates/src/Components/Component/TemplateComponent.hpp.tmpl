/*!
 * \file
 * \brief 
 * \author %TMPLAuthor%
 */

#ifndef TEMPLATECOMPONENT_HPP_
#define TEMPLATECOMPONENT_HPP_

#include "Component_Aux.hpp"
#include "Component.hpp"
#include "DataStream.hpp"
#include "Property.hpp"
#include "EventHandler2.hpp"

%TMPLDeps%

namespace Processors {
namespace TemplateComponent {

/*!
 * \class TemplateComponent
 * \brief TemplateComponent processor class.
 *
 * %TMPLDescription%
 */
class TemplateComponent: public Base::Component {
public:
	/*!
	 * Constructor.
	 */
	TemplateComponent(const std::string & name = "TemplateComponent");

	/*!
	 * Destructor
	 */
	virtual ~TemplateComponent();

	/*!
	 * Prepare components interface (register streams and handlers).
	 * At this point, all properties are already initialized and loaded to 
	 * values set in config file.
	 */
	void prepareInterface();

protected:

	/*!
	 * Connects source to given device.
	 */
	bool onInit();

	/*!
	 * Disconnect source from device, closes streams, etc.
	 */
	bool onFinish();

	/*!
	 * Start component
	 */
	bool onStart();

	/*!
	 * Stop component
	 */
	bool onStop();

%TMPLFields%
	
%TMPLMethodsHeaders%
};

} //: namespace TemplateComponent
} //: namespace Processors

/*
 * Register processor component.
 */
REGISTER_COMPONENT("TemplateComponent", Processors::TemplateComponent::TemplateComponent)

#endif /* TEMPLATECOMPONENT_HPP_ */
