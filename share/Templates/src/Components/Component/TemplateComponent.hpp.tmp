/*!
 * \file
 * \brief
 */

#ifndef TEMPLATECOMPONENT_HPP_
#define TEMPLATECOMPONENT_HPP_

#include "Component_Aux.hpp"
#include "Component.hpp"
#include "Panel_Empty.hpp"
#include "DataStream.hpp"
#include "Property.hpp"

namespace Processors {
namespace TemplateComponent {

/*!
 * \class TemplateComponent
 * \brief TemplateComponent processor class.
 */
class TemplateComponent: public Base::Component {
public:
	/*!
	 * Constructor.
	 */
	TemplateComponent(const std::string & name = "");

	/*!
	 * Destructor
	 */
	virtual ~TemplateComponent();

protected:

	/*!
	 * Connects source to given device.
	 */
	bool onInit();

	/*!
	 * Disconnect source from device, closes streams, etc.
	 */
	bool onFinish();

	/*!
	 * Retrieves data from device.
	 */
	bool onStep();

	/*!
	 * Start component
	 */
	bool onStart();

	/*!
	 * Stop component
	 */
	bool onStop();

	TMPLFields
	
	TMPLMethodsHeaders
};

} //: namespace TemplateComponent
} //: namespace Processors

/*
 * Register processor component.
 */
REGISTER_PROCESSOR_COMPONENT("TemplateComponent", Processors::TemplateComponent::TemplateComponent,
		Common::Panel_Empty)

#endif /* TEMPLATECOMPONENT_HPP_ */
